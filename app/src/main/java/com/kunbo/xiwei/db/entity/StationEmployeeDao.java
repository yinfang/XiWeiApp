package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATION_EMPLOYEE".
*/
public class StationEmployeeDao extends AbstractDao<StationEmployee, Long> {

    public static final String TABLENAME = "STATION_EMPLOYEE";

    /**
     * Properties of entity StationEmployee.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DeptId = new Property(1, String.class, "deptId", false, "DEPT_ID");
        public final static Property DeptName = new Property(2, String.class, "deptName", false, "DEPT_NAME");
        public final static Property PostId = new Property(3, String.class, "postId", false, "POST_ID");
        public final static Property PostDesc = new Property(4, String.class, "postDesc", false, "POST_DESC");
        public final static Property PostCode = new Property(5, String.class, "postCode", false, "POST_CODE");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property TeamId = new Property(7, String.class, "teamId", false, "TEAM_ID");
        public final static Property TeamName = new Property(8, String.class, "teamName", false, "TEAM_NAME");
    }


    public StationEmployeeDao(DaoConfig config) {
        super(config);
    }
    
    public StationEmployeeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATION_EMPLOYEE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DEPT_ID\" TEXT," + // 1: deptId
                "\"DEPT_NAME\" TEXT," + // 2: deptName
                "\"POST_ID\" TEXT," + // 3: postId
                "\"POST_DESC\" TEXT," + // 4: postDesc
                "\"POST_CODE\" TEXT," + // 5: postCode
                "\"NAME\" TEXT," + // 6: name
                "\"TEAM_ID\" TEXT," + // 7: teamId
                "\"TEAM_NAME\" TEXT);"); // 8: teamName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATION_EMPLOYEE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StationEmployee entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(2, deptId);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(3, deptName);
        }
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(4, postId);
        }
 
        String postDesc = entity.getPostDesc();
        if (postDesc != null) {
            stmt.bindString(5, postDesc);
        }
 
        String postCode = entity.getPostCode();
        if (postCode != null) {
            stmt.bindString(6, postCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(8, teamId);
        }
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(9, teamName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StationEmployee entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String deptId = entity.getDeptId();
        if (deptId != null) {
            stmt.bindString(2, deptId);
        }
 
        String deptName = entity.getDeptName();
        if (deptName != null) {
            stmt.bindString(3, deptName);
        }
 
        String postId = entity.getPostId();
        if (postId != null) {
            stmt.bindString(4, postId);
        }
 
        String postDesc = entity.getPostDesc();
        if (postDesc != null) {
            stmt.bindString(5, postDesc);
        }
 
        String postCode = entity.getPostCode();
        if (postCode != null) {
            stmt.bindString(6, postCode);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(8, teamId);
        }
 
        String teamName = entity.getTeamName();
        if (teamName != null) {
            stmt.bindString(9, teamName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StationEmployee readEntity(Cursor cursor, int offset) {
        StationEmployee entity = new StationEmployee( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // deptId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deptName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // postId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // postDesc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // postCode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // teamId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // teamName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StationEmployee entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeptId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeptName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPostId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPostDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPostCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTeamId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTeamName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StationEmployee entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StationEmployee entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StationEmployee entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
