package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kunbo.xiwei.db.entity.OverHighCarIn.StringConverent;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OVER_HIGH_CAR_OUT".
*/
public class OverHighCarOutDao extends AbstractDao<OverHighCarOut, Long> {

    public static final String TABLENAME = "OVER_HIGH_CAR_OUT";

    /**
     * Properties of entity OverHighCarOut.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property CheckTeamId = new Property(4, String.class, "checkTeamId", false, "CHECK_TEAM_ID");
        public final static Property TimeStamp = new Property(5, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Reason = new Property(6, String.class, "reason", false, "REASON");
        public final static Property CheckTeam = new Property(7, String.class, "checkTeam", false, "CHECK_TEAM");
        public final static Property CarNo = new Property(8, String.class, "carNo", false, "CAR_NO");
        public final static Property PassNo = new Property(9, String.class, "passNo", false, "PASS_NO");
        public final static Property FileNo = new Property(10, String.class, "fileNo", false, "FILE_NO");
        public final static Property RunNo = new Property(11, String.class, "runNo", false, "RUN_NO");
        public final static Property OwnerName = new Property(12, String.class, "ownerName", false, "OWNER_NAME");
        public final static Property BillNo = new Property(13, String.class, "billNo", false, "BILL_NO");
        public final static Property Dimens = new Property(14, String.class, "dimens", false, "DIMENS");
        public final static Property AllWeight = new Property(15, String.class, "allWeight", false, "ALL_WEIGHT");
        public final static Property InWeight = new Property(16, String.class, "inWeight", false, "IN_WEIGHT");
        public final static Property InStation = new Property(17, String.class, "inStation", false, "IN_STATION");
        public final static Property InStationId = new Property(18, String.class, "inStationId", false, "IN_STATION_ID");
        public final static Property ValidDate = new Property(19, String.class, "validDate", false, "VALID_DATE");
        public final static Property OutDate = new Property(20, String.class, "outDate", false, "OUT_DATE");
        public final static Property PassCompany = new Property(21, String.class, "passCompany", false, "PASS_COMPANY");
        public final static Property OutWeight = new Property(22, String.class, "outWeight", false, "OUT_WEIGHT");
        public final static Property GoodsName = new Property(23, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property AxleLoad = new Property(24, String.class, "axleLoad", false, "AXLE_LOAD");
        public final static Property OutDimens = new Property(25, String.class, "outDimens", false, "OUT_DIMENS");
        public final static Property HasCertificate = new Property(26, boolean.class, "hasCertificate", false, "HAS_CERTIFICATE");
        public final static Property IsEqual = new Property(27, boolean.class, "isEqual", false, "IS_EQUAL");
        public final static Property IsCare = new Property(28, boolean.class, "isCare", false, "IS_CARE");
        public final static Property CarePerson = new Property(29, String.class, "carePerson", false, "CARE_PERSON");
        public final static Property TotalFee = new Property(30, String.class, "totalFee", false, "TOTAL_FEE");
        public final static Property IsReduce = new Property(31, boolean.class, "isReduce", false, "IS_REDUCE");
        public final static Property BeforeFee = new Property(32, String.class, "beforeFee", false, "BEFORE_FEE");
        public final static Property AfterFee = new Property(33, String.class, "afterFee", false, "AFTER_FEE");
        public final static Property Result = new Property(34, String.class, "result", false, "RESULT");
        public final static Property SignatureChecker = new Property(35, String.class, "signatureChecker", false, "SIGNATURE_CHECKER");
        public final static Property SignatureFeeMan = new Property(36, String.class, "signatureFeeMan", false, "SIGNATURE_FEE_MAN");
        public final static Property SignatureMonitor = new Property(37, String.class, "signatureMonitor", false, "SIGNATURE_MONITOR");
        public final static Property Images = new Property(38, String.class, "images", false, "IMAGES");
        public final static Property IsSubmit = new Property(39, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(40, boolean.class, "isComplete", false, "IS_COMPLETE");
    }

    private final StringConverent imagesConverter = new StringConverent();

    public OverHighCarOutDao(DaoConfig config) {
        super(config);
    }
    
    public OverHighCarOutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OVER_HIGH_CAR_OUT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"CHECK_TEAM_ID\" TEXT," + // 4: checkTeamId
                "\"TIME_STAMP\" TEXT," + // 5: timeStamp
                "\"REASON\" TEXT," + // 6: reason
                "\"CHECK_TEAM\" TEXT," + // 7: checkTeam
                "\"CAR_NO\" TEXT," + // 8: carNo
                "\"PASS_NO\" TEXT," + // 9: passNo
                "\"FILE_NO\" TEXT," + // 10: fileNo
                "\"RUN_NO\" TEXT," + // 11: runNo
                "\"OWNER_NAME\" TEXT," + // 12: ownerName
                "\"BILL_NO\" TEXT," + // 13: billNo
                "\"DIMENS\" TEXT," + // 14: dimens
                "\"ALL_WEIGHT\" TEXT," + // 15: allWeight
                "\"IN_WEIGHT\" TEXT," + // 16: inWeight
                "\"IN_STATION\" TEXT," + // 17: inStation
                "\"IN_STATION_ID\" TEXT," + // 18: inStationId
                "\"VALID_DATE\" TEXT," + // 19: validDate
                "\"OUT_DATE\" TEXT," + // 20: outDate
                "\"PASS_COMPANY\" TEXT," + // 21: passCompany
                "\"OUT_WEIGHT\" TEXT," + // 22: outWeight
                "\"GOODS_NAME\" TEXT," + // 23: goodsName
                "\"AXLE_LOAD\" TEXT," + // 24: axleLoad
                "\"OUT_DIMENS\" TEXT," + // 25: outDimens
                "\"HAS_CERTIFICATE\" INTEGER NOT NULL ," + // 26: hasCertificate
                "\"IS_EQUAL\" INTEGER NOT NULL ," + // 27: isEqual
                "\"IS_CARE\" INTEGER NOT NULL ," + // 28: isCare
                "\"CARE_PERSON\" TEXT," + // 29: carePerson
                "\"TOTAL_FEE\" TEXT," + // 30: totalFee
                "\"IS_REDUCE\" INTEGER NOT NULL ," + // 31: isReduce
                "\"BEFORE_FEE\" TEXT," + // 32: beforeFee
                "\"AFTER_FEE\" TEXT," + // 33: afterFee
                "\"RESULT\" TEXT," + // 34: result
                "\"SIGNATURE_CHECKER\" TEXT," + // 35: signatureChecker
                "\"SIGNATURE_FEE_MAN\" TEXT," + // 36: signatureFeeMan
                "\"SIGNATURE_MONITOR\" TEXT," + // 37: signatureMonitor
                "\"IMAGES\" TEXT," + // 38: images
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 39: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 40: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OVER_HIGH_CAR_OUT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OverHighCarOut entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String checkTeamId = entity.getCheckTeamId();
        if (checkTeamId != null) {
            stmt.bindString(5, checkTeamId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(6, timeStamp);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(7, reason);
        }
 
        String checkTeam = entity.getCheckTeam();
        if (checkTeam != null) {
            stmt.bindString(8, checkTeam);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(9, carNo);
        }
 
        String passNo = entity.getPassNo();
        if (passNo != null) {
            stmt.bindString(10, passNo);
        }
 
        String fileNo = entity.getFileNo();
        if (fileNo != null) {
            stmt.bindString(11, fileNo);
        }
 
        String runNo = entity.getRunNo();
        if (runNo != null) {
            stmt.bindString(12, runNo);
        }
 
        String ownerName = entity.getOwnerName();
        if (ownerName != null) {
            stmt.bindString(13, ownerName);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(14, billNo);
        }
 
        String dimens = entity.getDimens();
        if (dimens != null) {
            stmt.bindString(15, dimens);
        }
 
        String allWeight = entity.getAllWeight();
        if (allWeight != null) {
            stmt.bindString(16, allWeight);
        }
 
        String inWeight = entity.getInWeight();
        if (inWeight != null) {
            stmt.bindString(17, inWeight);
        }
 
        String inStation = entity.getInStation();
        if (inStation != null) {
            stmt.bindString(18, inStation);
        }
 
        String inStationId = entity.getInStationId();
        if (inStationId != null) {
            stmt.bindString(19, inStationId);
        }
 
        String validDate = entity.getValidDate();
        if (validDate != null) {
            stmt.bindString(20, validDate);
        }
 
        String outDate = entity.getOutDate();
        if (outDate != null) {
            stmt.bindString(21, outDate);
        }
 
        String passCompany = entity.getPassCompany();
        if (passCompany != null) {
            stmt.bindString(22, passCompany);
        }
 
        String outWeight = entity.getOutWeight();
        if (outWeight != null) {
            stmt.bindString(23, outWeight);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(24, goodsName);
        }
 
        String axleLoad = entity.getAxleLoad();
        if (axleLoad != null) {
            stmt.bindString(25, axleLoad);
        }
 
        String outDimens = entity.getOutDimens();
        if (outDimens != null) {
            stmt.bindString(26, outDimens);
        }
        stmt.bindLong(27, entity.getHasCertificate() ? 1L: 0L);
        stmt.bindLong(28, entity.getIsEqual() ? 1L: 0L);
        stmt.bindLong(29, entity.getIsCare() ? 1L: 0L);
 
        String carePerson = entity.getCarePerson();
        if (carePerson != null) {
            stmt.bindString(30, carePerson);
        }
 
        String totalFee = entity.getTotalFee();
        if (totalFee != null) {
            stmt.bindString(31, totalFee);
        }
        stmt.bindLong(32, entity.getIsReduce() ? 1L: 0L);
 
        String beforeFee = entity.getBeforeFee();
        if (beforeFee != null) {
            stmt.bindString(33, beforeFee);
        }
 
        String afterFee = entity.getAfterFee();
        if (afterFee != null) {
            stmt.bindString(34, afterFee);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(35, result);
        }
 
        String signatureChecker = entity.getSignatureChecker();
        if (signatureChecker != null) {
            stmt.bindString(36, signatureChecker);
        }
 
        String signatureFeeMan = entity.getSignatureFeeMan();
        if (signatureFeeMan != null) {
            stmt.bindString(37, signatureFeeMan);
        }
 
        String signatureMonitor = entity.getSignatureMonitor();
        if (signatureMonitor != null) {
            stmt.bindString(38, signatureMonitor);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(39, imagesConverter.convertToDatabaseValue(images));
        }
        stmt.bindLong(40, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(41, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OverHighCarOut entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String checkTeamId = entity.getCheckTeamId();
        if (checkTeamId != null) {
            stmt.bindString(5, checkTeamId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(6, timeStamp);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(7, reason);
        }
 
        String checkTeam = entity.getCheckTeam();
        if (checkTeam != null) {
            stmt.bindString(8, checkTeam);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(9, carNo);
        }
 
        String passNo = entity.getPassNo();
        if (passNo != null) {
            stmt.bindString(10, passNo);
        }
 
        String fileNo = entity.getFileNo();
        if (fileNo != null) {
            stmt.bindString(11, fileNo);
        }
 
        String runNo = entity.getRunNo();
        if (runNo != null) {
            stmt.bindString(12, runNo);
        }
 
        String ownerName = entity.getOwnerName();
        if (ownerName != null) {
            stmt.bindString(13, ownerName);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(14, billNo);
        }
 
        String dimens = entity.getDimens();
        if (dimens != null) {
            stmt.bindString(15, dimens);
        }
 
        String allWeight = entity.getAllWeight();
        if (allWeight != null) {
            stmt.bindString(16, allWeight);
        }
 
        String inWeight = entity.getInWeight();
        if (inWeight != null) {
            stmt.bindString(17, inWeight);
        }
 
        String inStation = entity.getInStation();
        if (inStation != null) {
            stmt.bindString(18, inStation);
        }
 
        String inStationId = entity.getInStationId();
        if (inStationId != null) {
            stmt.bindString(19, inStationId);
        }
 
        String validDate = entity.getValidDate();
        if (validDate != null) {
            stmt.bindString(20, validDate);
        }
 
        String outDate = entity.getOutDate();
        if (outDate != null) {
            stmt.bindString(21, outDate);
        }
 
        String passCompany = entity.getPassCompany();
        if (passCompany != null) {
            stmt.bindString(22, passCompany);
        }
 
        String outWeight = entity.getOutWeight();
        if (outWeight != null) {
            stmt.bindString(23, outWeight);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(24, goodsName);
        }
 
        String axleLoad = entity.getAxleLoad();
        if (axleLoad != null) {
            stmt.bindString(25, axleLoad);
        }
 
        String outDimens = entity.getOutDimens();
        if (outDimens != null) {
            stmt.bindString(26, outDimens);
        }
        stmt.bindLong(27, entity.getHasCertificate() ? 1L: 0L);
        stmt.bindLong(28, entity.getIsEqual() ? 1L: 0L);
        stmt.bindLong(29, entity.getIsCare() ? 1L: 0L);
 
        String carePerson = entity.getCarePerson();
        if (carePerson != null) {
            stmt.bindString(30, carePerson);
        }
 
        String totalFee = entity.getTotalFee();
        if (totalFee != null) {
            stmt.bindString(31, totalFee);
        }
        stmt.bindLong(32, entity.getIsReduce() ? 1L: 0L);
 
        String beforeFee = entity.getBeforeFee();
        if (beforeFee != null) {
            stmt.bindString(33, beforeFee);
        }
 
        String afterFee = entity.getAfterFee();
        if (afterFee != null) {
            stmt.bindString(34, afterFee);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(35, result);
        }
 
        String signatureChecker = entity.getSignatureChecker();
        if (signatureChecker != null) {
            stmt.bindString(36, signatureChecker);
        }
 
        String signatureFeeMan = entity.getSignatureFeeMan();
        if (signatureFeeMan != null) {
            stmt.bindString(37, signatureFeeMan);
        }
 
        String signatureMonitor = entity.getSignatureMonitor();
        if (signatureMonitor != null) {
            stmt.bindString(38, signatureMonitor);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(39, imagesConverter.convertToDatabaseValue(images));
        }
        stmt.bindLong(40, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(41, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OverHighCarOut readEntity(Cursor cursor, int offset) {
        OverHighCarOut entity = new OverHighCarOut( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // checkTeamId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeStamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // reason
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checkTeam
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // carNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // passNo
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // runNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ownerName
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // billNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // dimens
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // allWeight
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // inWeight
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // inStation
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // inStationId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // validDate
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // outDate
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // passCompany
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // outWeight
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // goodsName
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // axleLoad
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // outDimens
            cursor.getShort(offset + 26) != 0, // hasCertificate
            cursor.getShort(offset + 27) != 0, // isEqual
            cursor.getShort(offset + 28) != 0, // isCare
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // carePerson
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // totalFee
            cursor.getShort(offset + 31) != 0, // isReduce
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // beforeFee
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // afterFee
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // result
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // signatureChecker
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // signatureFeeMan
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // signatureMonitor
            cursor.isNull(offset + 38) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 38)), // images
            cursor.getShort(offset + 39) != 0, // isSubmit
            cursor.getShort(offset + 40) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OverHighCarOut entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCheckTeamId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeStamp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setReason(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckTeam(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCarNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassNo(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRunNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOwnerName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setBillNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setDimens(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setAllWeight(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setInWeight(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setInStation(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInStationId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setValidDate(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setOutDate(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPassCompany(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setOutWeight(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setGoodsName(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setAxleLoad(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setOutDimens(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setHasCertificate(cursor.getShort(offset + 26) != 0);
        entity.setIsEqual(cursor.getShort(offset + 27) != 0);
        entity.setIsCare(cursor.getShort(offset + 28) != 0);
        entity.setCarePerson(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setTotalFee(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setIsReduce(cursor.getShort(offset + 31) != 0);
        entity.setBeforeFee(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setAfterFee(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setResult(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setSignatureChecker(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setSignatureFeeMan(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setSignatureMonitor(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setImages(cursor.isNull(offset + 38) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 38)));
        entity.setIsSubmit(cursor.getShort(offset + 39) != 0);
        entity.setIsComplete(cursor.getShort(offset + 40) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OverHighCarOut entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OverHighCarOut entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OverHighCarOut entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
