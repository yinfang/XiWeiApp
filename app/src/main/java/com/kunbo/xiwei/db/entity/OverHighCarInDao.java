package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kunbo.xiwei.db.entity.OverHighCarIn.StringConverent;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OVER_HIGH_CAR_IN".
*/
public class OverHighCarInDao extends AbstractDao<OverHighCarIn, Long> {

    public static final String TABLENAME = "OVER_HIGH_CAR_IN";

    /**
     * Properties of entity OverHighCarIn.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property TimeStamp = new Property(4, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Reason = new Property(5, String.class, "reason", false, "REASON");
        public final static Property CheckTeam = new Property(6, String.class, "checkTeam", false, "CHECK_TEAM");
        public final static Property CheckTeamId = new Property(7, String.class, "checkTeamId", false, "CHECK_TEAM_ID");
        public final static Property CarNo = new Property(8, String.class, "carNo", false, "CAR_NO");
        public final static Property CarOwnerName = new Property(9, String.class, "carOwnerName", false, "CAR_OWNER_NAME");
        public final static Property FileNo = new Property(10, String.class, "fileNo", false, "FILE_NO");
        public final static Property RunNo = new Property(11, String.class, "runNo", false, "RUN_NO");
        public final static Property Name = new Property(12, String.class, "name", false, "NAME");
        public final static Property Relation = new Property(13, String.class, "relation", false, "RELATION");
        public final static Property Company = new Property(14, String.class, "company", false, "COMPANY");
        public final static Property CompanyLegalPeople = new Property(15, String.class, "companyLegalPeople", false, "COMPANY_LEGAL_PEOPLE");
        public final static Property CheckDate = new Property(16, String.class, "checkDate", false, "CHECK_DATE");
        public final static Property ValidDate = new Property(17, String.class, "validDate", false, "VALID_DATE");
        public final static Property PassNo = new Property(18, String.class, "passNo", false, "PASS_NO");
        public final static Property PassCompany = new Property(19, String.class, "passCompany", false, "PASS_COMPANY");
        public final static Property Weight = new Property(20, String.class, "weight", false, "WEIGHT");
        public final static Property Dimens = new Property(21, String.class, "dimens", false, "DIMENS");
        public final static Property GoodsName = new Property(22, String.class, "goodsName", false, "GOODS_NAME");
        public final static Property TransportCompany = new Property(23, String.class, "transportCompany", false, "TRANSPORT_COMPANY");
        public final static Property IsEqual = new Property(24, boolean.class, "isEqual", false, "IS_EQUAL");
        public final static Property CheckWay = new Property(25, String.class, "checkWay", false, "CHECK_WAY");
        public final static Property Iscare = new Property(26, boolean.class, "iscare", false, "ISCARE");
        public final static Property CarePerson = new Property(27, String.class, "carePerson", false, "CARE_PERSON");
        public final static Property Other = new Property(28, String.class, "other", false, "OTHER");
        public final static Property Rules = new Property(29, String.class, "rules", false, "RULES");
        public final static Property InformedDate = new Property(30, String.class, "informedDate", false, "INFORMED_DATE");
        public final static Property SignatureInformed = new Property(31, String.class, "signatureInformed", false, "SIGNATURE_INFORMED");
        public final static Property SignatureChecker = new Property(32, String.class, "signatureChecker", false, "SIGNATURE_CHECKER");
        public final static Property SignatureMonitor = new Property(33, String.class, "signatureMonitor", false, "SIGNATURE_MONITOR");
        public final static Property CertificateNo = new Property(34, String.class, "certificateNo", false, "CERTIFICATE_NO");
        public final static Property Images = new Property(35, String.class, "images", false, "IMAGES");
        public final static Property IsSubmit = new Property(36, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(37, boolean.class, "isComplete", false, "IS_COMPLETE");
    }

    private final StringConverent imagesConverter = new StringConverent();

    public OverHighCarInDao(DaoConfig config) {
        super(config);
    }
    
    public OverHighCarInDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OVER_HIGH_CAR_IN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"TIME_STAMP\" TEXT," + // 4: timeStamp
                "\"REASON\" TEXT," + // 5: reason
                "\"CHECK_TEAM\" TEXT," + // 6: checkTeam
                "\"CHECK_TEAM_ID\" TEXT," + // 7: checkTeamId
                "\"CAR_NO\" TEXT," + // 8: carNo
                "\"CAR_OWNER_NAME\" TEXT," + // 9: carOwnerName
                "\"FILE_NO\" TEXT," + // 10: fileNo
                "\"RUN_NO\" TEXT," + // 11: runNo
                "\"NAME\" TEXT," + // 12: name
                "\"RELATION\" TEXT," + // 13: relation
                "\"COMPANY\" TEXT," + // 14: company
                "\"COMPANY_LEGAL_PEOPLE\" TEXT," + // 15: companyLegalPeople
                "\"CHECK_DATE\" TEXT," + // 16: checkDate
                "\"VALID_DATE\" TEXT," + // 17: validDate
                "\"PASS_NO\" TEXT," + // 18: passNo
                "\"PASS_COMPANY\" TEXT," + // 19: passCompany
                "\"WEIGHT\" TEXT," + // 20: weight
                "\"DIMENS\" TEXT," + // 21: dimens
                "\"GOODS_NAME\" TEXT," + // 22: goodsName
                "\"TRANSPORT_COMPANY\" TEXT," + // 23: transportCompany
                "\"IS_EQUAL\" INTEGER NOT NULL ," + // 24: isEqual
                "\"CHECK_WAY\" TEXT," + // 25: checkWay
                "\"ISCARE\" INTEGER NOT NULL ," + // 26: iscare
                "\"CARE_PERSON\" TEXT," + // 27: carePerson
                "\"OTHER\" TEXT," + // 28: other
                "\"RULES\" TEXT," + // 29: rules
                "\"INFORMED_DATE\" TEXT," + // 30: informedDate
                "\"SIGNATURE_INFORMED\" TEXT," + // 31: signatureInformed
                "\"SIGNATURE_CHECKER\" TEXT," + // 32: signatureChecker
                "\"SIGNATURE_MONITOR\" TEXT," + // 33: signatureMonitor
                "\"CERTIFICATE_NO\" TEXT," + // 34: certificateNo
                "\"IMAGES\" TEXT," + // 35: images
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 36: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 37: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OVER_HIGH_CAR_IN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OverHighCarIn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        String checkTeam = entity.getCheckTeam();
        if (checkTeam != null) {
            stmt.bindString(7, checkTeam);
        }
 
        String checkTeamId = entity.getCheckTeamId();
        if (checkTeamId != null) {
            stmt.bindString(8, checkTeamId);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(9, carNo);
        }
 
        String carOwnerName = entity.getCarOwnerName();
        if (carOwnerName != null) {
            stmt.bindString(10, carOwnerName);
        }
 
        String fileNo = entity.getFileNo();
        if (fileNo != null) {
            stmt.bindString(11, fileNo);
        }
 
        String runNo = entity.getRunNo();
        if (runNo != null) {
            stmt.bindString(12, runNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(13, name);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(14, relation);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(15, company);
        }
 
        String companyLegalPeople = entity.getCompanyLegalPeople();
        if (companyLegalPeople != null) {
            stmt.bindString(16, companyLegalPeople);
        }
 
        String checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindString(17, checkDate);
        }
 
        String validDate = entity.getValidDate();
        if (validDate != null) {
            stmt.bindString(18, validDate);
        }
 
        String passNo = entity.getPassNo();
        if (passNo != null) {
            stmt.bindString(19, passNo);
        }
 
        String passCompany = entity.getPassCompany();
        if (passCompany != null) {
            stmt.bindString(20, passCompany);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(21, weight);
        }
 
        String dimens = entity.getDimens();
        if (dimens != null) {
            stmt.bindString(22, dimens);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(23, goodsName);
        }
 
        String transportCompany = entity.getTransportCompany();
        if (transportCompany != null) {
            stmt.bindString(24, transportCompany);
        }
        stmt.bindLong(25, entity.getIsEqual() ? 1L: 0L);
 
        String checkWay = entity.getCheckWay();
        if (checkWay != null) {
            stmt.bindString(26, checkWay);
        }
        stmt.bindLong(27, entity.getIscare() ? 1L: 0L);
 
        String carePerson = entity.getCarePerson();
        if (carePerson != null) {
            stmt.bindString(28, carePerson);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(29, other);
        }
 
        String rules = entity.getRules();
        if (rules != null) {
            stmt.bindString(30, rules);
        }
 
        String informedDate = entity.getInformedDate();
        if (informedDate != null) {
            stmt.bindString(31, informedDate);
        }
 
        String signatureInformed = entity.getSignatureInformed();
        if (signatureInformed != null) {
            stmt.bindString(32, signatureInformed);
        }
 
        String signatureChecker = entity.getSignatureChecker();
        if (signatureChecker != null) {
            stmt.bindString(33, signatureChecker);
        }
 
        String signatureMonitor = entity.getSignatureMonitor();
        if (signatureMonitor != null) {
            stmt.bindString(34, signatureMonitor);
        }
 
        String certificateNo = entity.getCertificateNo();
        if (certificateNo != null) {
            stmt.bindString(35, certificateNo);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(36, imagesConverter.convertToDatabaseValue(images));
        }
        stmt.bindLong(37, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(38, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OverHighCarIn entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String reason = entity.getReason();
        if (reason != null) {
            stmt.bindString(6, reason);
        }
 
        String checkTeam = entity.getCheckTeam();
        if (checkTeam != null) {
            stmt.bindString(7, checkTeam);
        }
 
        String checkTeamId = entity.getCheckTeamId();
        if (checkTeamId != null) {
            stmt.bindString(8, checkTeamId);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(9, carNo);
        }
 
        String carOwnerName = entity.getCarOwnerName();
        if (carOwnerName != null) {
            stmt.bindString(10, carOwnerName);
        }
 
        String fileNo = entity.getFileNo();
        if (fileNo != null) {
            stmt.bindString(11, fileNo);
        }
 
        String runNo = entity.getRunNo();
        if (runNo != null) {
            stmt.bindString(12, runNo);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(13, name);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(14, relation);
        }
 
        String company = entity.getCompany();
        if (company != null) {
            stmt.bindString(15, company);
        }
 
        String companyLegalPeople = entity.getCompanyLegalPeople();
        if (companyLegalPeople != null) {
            stmt.bindString(16, companyLegalPeople);
        }
 
        String checkDate = entity.getCheckDate();
        if (checkDate != null) {
            stmt.bindString(17, checkDate);
        }
 
        String validDate = entity.getValidDate();
        if (validDate != null) {
            stmt.bindString(18, validDate);
        }
 
        String passNo = entity.getPassNo();
        if (passNo != null) {
            stmt.bindString(19, passNo);
        }
 
        String passCompany = entity.getPassCompany();
        if (passCompany != null) {
            stmt.bindString(20, passCompany);
        }
 
        String weight = entity.getWeight();
        if (weight != null) {
            stmt.bindString(21, weight);
        }
 
        String dimens = entity.getDimens();
        if (dimens != null) {
            stmt.bindString(22, dimens);
        }
 
        String goodsName = entity.getGoodsName();
        if (goodsName != null) {
            stmt.bindString(23, goodsName);
        }
 
        String transportCompany = entity.getTransportCompany();
        if (transportCompany != null) {
            stmt.bindString(24, transportCompany);
        }
        stmt.bindLong(25, entity.getIsEqual() ? 1L: 0L);
 
        String checkWay = entity.getCheckWay();
        if (checkWay != null) {
            stmt.bindString(26, checkWay);
        }
        stmt.bindLong(27, entity.getIscare() ? 1L: 0L);
 
        String carePerson = entity.getCarePerson();
        if (carePerson != null) {
            stmt.bindString(28, carePerson);
        }
 
        String other = entity.getOther();
        if (other != null) {
            stmt.bindString(29, other);
        }
 
        String rules = entity.getRules();
        if (rules != null) {
            stmt.bindString(30, rules);
        }
 
        String informedDate = entity.getInformedDate();
        if (informedDate != null) {
            stmt.bindString(31, informedDate);
        }
 
        String signatureInformed = entity.getSignatureInformed();
        if (signatureInformed != null) {
            stmt.bindString(32, signatureInformed);
        }
 
        String signatureChecker = entity.getSignatureChecker();
        if (signatureChecker != null) {
            stmt.bindString(33, signatureChecker);
        }
 
        String signatureMonitor = entity.getSignatureMonitor();
        if (signatureMonitor != null) {
            stmt.bindString(34, signatureMonitor);
        }
 
        String certificateNo = entity.getCertificateNo();
        if (certificateNo != null) {
            stmt.bindString(35, certificateNo);
        }
 
        List images = entity.getImages();
        if (images != null) {
            stmt.bindString(36, imagesConverter.convertToDatabaseValue(images));
        }
        stmt.bindLong(37, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(38, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OverHighCarIn readEntity(Cursor cursor, int offset) {
        OverHighCarIn entity = new OverHighCarIn( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // reason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checkTeam
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checkTeamId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // carNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // carOwnerName
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // fileNo
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // runNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // relation
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // company
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // companyLegalPeople
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // checkDate
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // validDate
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // passNo
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // passCompany
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // weight
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // dimens
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // goodsName
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // transportCompany
            cursor.getShort(offset + 24) != 0, // isEqual
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // checkWay
            cursor.getShort(offset + 26) != 0, // iscare
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // carePerson
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // other
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // rules
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // informedDate
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // signatureInformed
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // signatureChecker
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // signatureMonitor
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // certificateNo
            cursor.isNull(offset + 35) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 35)), // images
            cursor.getShort(offset + 36) != 0, // isSubmit
            cursor.getShort(offset + 37) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OverHighCarIn entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCheckTeam(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckTeamId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCarNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCarOwnerName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setFileNo(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRunNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRelation(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCompany(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCompanyLegalPeople(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setCheckDate(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setValidDate(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPassNo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setPassCompany(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setWeight(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDimens(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setGoodsName(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTransportCompany(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setIsEqual(cursor.getShort(offset + 24) != 0);
        entity.setCheckWay(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIscare(cursor.getShort(offset + 26) != 0);
        entity.setCarePerson(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setOther(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRules(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setInformedDate(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setSignatureInformed(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setSignatureChecker(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setSignatureMonitor(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setCertificateNo(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setImages(cursor.isNull(offset + 35) ? null : imagesConverter.convertToEntityProperty(cursor.getString(offset + 35)));
        entity.setIsSubmit(cursor.getShort(offset + 36) != 0);
        entity.setIsComplete(cursor.getShort(offset + 37) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OverHighCarIn entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OverHighCarIn entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OverHighCarIn entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
