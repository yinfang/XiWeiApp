package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kunbo.xiwei.db.entity.SpecialForm.PhotoConverter;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SPECIAL_FORM".
*/
public class SpecialFormDao extends AbstractDao<SpecialForm, Long> {

    public static final String TABLENAME = "SPECIAL_FORM";

    /**
     * Properties of entity SpecialForm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property TeamId = new Property(4, String.class, "teamId", false, "TEAM_ID");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property TimeStamp = new Property(6, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
        public final static Property TypeId = new Property(8, String.class, "typeId", false, "TYPE_ID");
        public final static Property Date = new Property(9, String.class, "date", false, "DATE");
        public final static Property Time = new Property(10, String.class, "time", false, "TIME");
        public final static Property ClassType = new Property(11, String.class, "classType", false, "CLASS_TYPE");
        public final static Property Feeman = new Property(12, String.class, "feeman", false, "FEEMAN");
        public final static Property FeemanId = new Property(13, String.class, "feemanId", false, "FEEMAN_ID");
        public final static Property JobNo = new Property(14, String.class, "jobNo", false, "JOB_NO");
        public final static Property Lane = new Property(15, String.class, "lane", false, "LANE");
        public final static Property LaneId = new Property(16, String.class, "laneId", false, "LANE_ID");
        public final static Property CarNo = new Property(17, String.class, "carNo", false, "CAR_NO");
        public final static Property CarType = new Property(18, String.class, "carType", false, "CAR_TYPE");
        public final static Property CarTypeId = new Property(19, String.class, "carTypeId", false, "CAR_TYPE_ID");
        public final static Property Detail = new Property(20, String.class, "detail", false, "DETAIL");
        public final static Property Photos = new Property(21, String.class, "photos", false, "PHOTOS");
        public final static Property Remark = new Property(22, String.class, "remark", false, "REMARK");
        public final static Property IsSolve = new Property(23, String.class, "isSolve", false, "IS_SOLVE");
        public final static Property SiteAgent = new Property(24, String.class, "siteAgent", false, "SITE_AGENT");
        public final static Property SiteAgentId = new Property(25, String.class, "siteAgentId", false, "SITE_AGENT_ID");
        public final static Property SignatureFeeman = new Property(26, String.class, "signatureFeeman", false, "SIGNATURE_FEEMAN");
        public final static Property SignatureMonitor = new Property(27, String.class, "signatureMonitor", false, "SIGNATURE_MONITOR");
        public final static Property IsSubmit = new Property(28, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(29, boolean.class, "isComplete", false, "IS_COMPLETE");
    }

    private final PhotoConverter photosConverter = new PhotoConverter();

    public SpecialFormDao(DaoConfig config) {
        super(config);
    }
    
    public SpecialFormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPECIAL_FORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"TEAM_ID\" TEXT," + // 4: teamId
                "\"NAME\" TEXT," + // 5: name
                "\"TIME_STAMP\" TEXT," + // 6: timeStamp
                "\"TYPE\" TEXT," + // 7: type
                "\"TYPE_ID\" TEXT," + // 8: typeId
                "\"DATE\" TEXT," + // 9: date
                "\"TIME\" TEXT," + // 10: time
                "\"CLASS_TYPE\" TEXT," + // 11: classType
                "\"FEEMAN\" TEXT," + // 12: feeman
                "\"FEEMAN_ID\" TEXT," + // 13: feemanId
                "\"JOB_NO\" TEXT," + // 14: jobNo
                "\"LANE\" TEXT," + // 15: lane
                "\"LANE_ID\" TEXT," + // 16: laneId
                "\"CAR_NO\" TEXT," + // 17: carNo
                "\"CAR_TYPE\" TEXT," + // 18: carType
                "\"CAR_TYPE_ID\" TEXT," + // 19: carTypeId
                "\"DETAIL\" TEXT," + // 20: detail
                "\"PHOTOS\" TEXT," + // 21: photos
                "\"REMARK\" TEXT," + // 22: remark
                "\"IS_SOLVE\" TEXT," + // 23: isSolve
                "\"SITE_AGENT\" TEXT," + // 24: siteAgent
                "\"SITE_AGENT_ID\" TEXT," + // 25: siteAgentId
                "\"SIGNATURE_FEEMAN\" TEXT," + // 26: signatureFeeman
                "\"SIGNATURE_MONITOR\" TEXT," + // 27: signatureMonitor
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 28: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 29: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPECIAL_FORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SpecialForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(5, teamId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(7, timeStamp);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(9, typeId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(10, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(11, time);
        }
 
        String classType = entity.getClassType();
        if (classType != null) {
            stmt.bindString(12, classType);
        }
 
        String feeman = entity.getFeeman();
        if (feeman != null) {
            stmt.bindString(13, feeman);
        }
 
        String feemanId = entity.getFeemanId();
        if (feemanId != null) {
            stmt.bindString(14, feemanId);
        }
 
        String jobNo = entity.getJobNo();
        if (jobNo != null) {
            stmt.bindString(15, jobNo);
        }
 
        String lane = entity.getLane();
        if (lane != null) {
            stmt.bindString(16, lane);
        }
 
        String laneId = entity.getLaneId();
        if (laneId != null) {
            stmt.bindString(17, laneId);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(18, carNo);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(19, carType);
        }
 
        String carTypeId = entity.getCarTypeId();
        if (carTypeId != null) {
            stmt.bindString(20, carTypeId);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(21, detail);
        }
 
        List photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(22, photosConverter.convertToDatabaseValue(photos));
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(23, remark);
        }
 
        String isSolve = entity.getIsSolve();
        if (isSolve != null) {
            stmt.bindString(24, isSolve);
        }
 
        String siteAgent = entity.getSiteAgent();
        if (siteAgent != null) {
            stmt.bindString(25, siteAgent);
        }
 
        String siteAgentId = entity.getSiteAgentId();
        if (siteAgentId != null) {
            stmt.bindString(26, siteAgentId);
        }
 
        String signatureFeeman = entity.getSignatureFeeman();
        if (signatureFeeman != null) {
            stmt.bindString(27, signatureFeeman);
        }
 
        String signatureMonitor = entity.getSignatureMonitor();
        if (signatureMonitor != null) {
            stmt.bindString(28, signatureMonitor);
        }
        stmt.bindLong(29, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(30, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SpecialForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(5, teamId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(7, timeStamp);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
 
        String typeId = entity.getTypeId();
        if (typeId != null) {
            stmt.bindString(9, typeId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(10, date);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(11, time);
        }
 
        String classType = entity.getClassType();
        if (classType != null) {
            stmt.bindString(12, classType);
        }
 
        String feeman = entity.getFeeman();
        if (feeman != null) {
            stmt.bindString(13, feeman);
        }
 
        String feemanId = entity.getFeemanId();
        if (feemanId != null) {
            stmt.bindString(14, feemanId);
        }
 
        String jobNo = entity.getJobNo();
        if (jobNo != null) {
            stmt.bindString(15, jobNo);
        }
 
        String lane = entity.getLane();
        if (lane != null) {
            stmt.bindString(16, lane);
        }
 
        String laneId = entity.getLaneId();
        if (laneId != null) {
            stmt.bindString(17, laneId);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(18, carNo);
        }
 
        String carType = entity.getCarType();
        if (carType != null) {
            stmt.bindString(19, carType);
        }
 
        String carTypeId = entity.getCarTypeId();
        if (carTypeId != null) {
            stmt.bindString(20, carTypeId);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(21, detail);
        }
 
        List photos = entity.getPhotos();
        if (photos != null) {
            stmt.bindString(22, photosConverter.convertToDatabaseValue(photos));
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(23, remark);
        }
 
        String isSolve = entity.getIsSolve();
        if (isSolve != null) {
            stmt.bindString(24, isSolve);
        }
 
        String siteAgent = entity.getSiteAgent();
        if (siteAgent != null) {
            stmt.bindString(25, siteAgent);
        }
 
        String siteAgentId = entity.getSiteAgentId();
        if (siteAgentId != null) {
            stmt.bindString(26, siteAgentId);
        }
 
        String signatureFeeman = entity.getSignatureFeeman();
        if (signatureFeeman != null) {
            stmt.bindString(27, signatureFeeman);
        }
 
        String signatureMonitor = entity.getSignatureMonitor();
        if (signatureMonitor != null) {
            stmt.bindString(28, signatureMonitor);
        }
        stmt.bindLong(29, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(30, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SpecialForm readEntity(Cursor cursor, int offset) {
        SpecialForm entity = new SpecialForm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // teamId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // timeStamp
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // type
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // typeId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // date
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // time
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // classType
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // feeman
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // feemanId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // jobNo
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // lane
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // laneId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // carNo
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // carType
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // carTypeId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // detail
            cursor.isNull(offset + 21) ? null : photosConverter.convertToEntityProperty(cursor.getString(offset + 21)), // photos
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // remark
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // isSolve
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // siteAgent
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // siteAgentId
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // signatureFeeman
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // signatureMonitor
            cursor.getShort(offset + 28) != 0, // isSubmit
            cursor.getShort(offset + 29) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SpecialForm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTeamId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeStamp(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTypeId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTime(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setClassType(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setFeeman(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setFeemanId(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setJobNo(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setLane(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setLaneId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCarNo(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setCarType(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setCarTypeId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDetail(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPhotos(cursor.isNull(offset + 21) ? null : photosConverter.convertToEntityProperty(cursor.getString(offset + 21)));
        entity.setRemark(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setIsSolve(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setSiteAgent(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setSiteAgentId(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setSignatureFeeman(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setSignatureMonitor(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setIsSubmit(cursor.getShort(offset + 28) != 0);
        entity.setIsComplete(cursor.getShort(offset + 29) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SpecialForm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SpecialForm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SpecialForm entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
