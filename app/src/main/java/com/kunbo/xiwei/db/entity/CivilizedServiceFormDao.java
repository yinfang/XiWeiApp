package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CIVILIZED_SERVICE_FORM".
*/
public class CivilizedServiceFormDao extends AbstractDao<CivilizedServiceForm, Long> {

    public static final String TABLENAME = "CIVILIZED_SERVICE_FORM";

    /**
     * Properties of entity CivilizedServiceForm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property TimeStamp = new Property(4, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Date = new Property(5, String.class, "date", false, "DATE");
        public final static Property Num = new Property(6, String.class, "num", false, "NUM");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
        public final static Property CarNo = new Property(8, String.class, "carNo", false, "CAR_NO");
        public final static Property ServiceType = new Property(9, String.class, "serviceType", false, "SERVICE_TYPE");
        public final static Property ServiceTypeId = new Property(10, String.class, "serviceTypeId", false, "SERVICE_TYPE_ID");
        public final static Property UseGoods = new Property(11, String.class, "useGoods", false, "USE_GOODS");
        public final static Property Remark = new Property(12, String.class, "remark", false, "REMARK");
        public final static Property OutSingnature = new Property(13, String.class, "outSingnature", false, "OUT_SINGNATURE");
        public final static Property IsSubmit = new Property(14, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(15, boolean.class, "isComplete", false, "IS_COMPLETE");
    }


    public CivilizedServiceFormDao(DaoConfig config) {
        super(config);
    }
    
    public CivilizedServiceFormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CIVILIZED_SERVICE_FORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"TIME_STAMP\" TEXT," + // 4: timeStamp
                "\"DATE\" TEXT," + // 5: date
                "\"NUM\" TEXT," + // 6: num
                "\"TIME\" TEXT," + // 7: time
                "\"CAR_NO\" TEXT," + // 8: carNo
                "\"SERVICE_TYPE\" TEXT," + // 9: serviceType
                "\"SERVICE_TYPE_ID\" TEXT," + // 10: serviceTypeId
                "\"USE_GOODS\" TEXT," + // 11: useGoods
                "\"REMARK\" TEXT," + // 12: remark
                "\"OUT_SINGNATURE\" TEXT," + // 13: outSingnature
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 14: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 15: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CIVILIZED_SERVICE_FORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CivilizedServiceForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(7, num);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(9, carNo);
        }
 
        String serviceType = entity.getServiceType();
        if (serviceType != null) {
            stmt.bindString(10, serviceType);
        }
 
        String serviceTypeId = entity.getServiceTypeId();
        if (serviceTypeId != null) {
            stmt.bindString(11, serviceTypeId);
        }
 
        String useGoods = entity.getUseGoods();
        if (useGoods != null) {
            stmt.bindString(12, useGoods);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String outSingnature = entity.getOutSingnature();
        if (outSingnature != null) {
            stmt.bindString(14, outSingnature);
        }
        stmt.bindLong(15, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CivilizedServiceForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(6, date);
        }
 
        String num = entity.getNum();
        if (num != null) {
            stmt.bindString(7, num);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(9, carNo);
        }
 
        String serviceType = entity.getServiceType();
        if (serviceType != null) {
            stmt.bindString(10, serviceType);
        }
 
        String serviceTypeId = entity.getServiceTypeId();
        if (serviceTypeId != null) {
            stmt.bindString(11, serviceTypeId);
        }
 
        String useGoods = entity.getUseGoods();
        if (useGoods != null) {
            stmt.bindString(12, useGoods);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(13, remark);
        }
 
        String outSingnature = entity.getOutSingnature();
        if (outSingnature != null) {
            stmt.bindString(14, outSingnature);
        }
        stmt.bindLong(15, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(16, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CivilizedServiceForm readEntity(Cursor cursor, int offset) {
        CivilizedServiceForm entity = new CivilizedServiceForm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // date
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // num
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // carNo
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // serviceType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // serviceTypeId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // useGoods
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // remark
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // outSingnature
            cursor.getShort(offset + 14) != 0, // isSubmit
            cursor.getShort(offset + 15) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CivilizedServiceForm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDate(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNum(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCarNo(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setServiceType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setServiceTypeId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUseGoods(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRemark(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOutSingnature(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsSubmit(cursor.getShort(offset + 14) != 0);
        entity.setIsComplete(cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CivilizedServiceForm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CivilizedServiceForm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CivilizedServiceForm entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
