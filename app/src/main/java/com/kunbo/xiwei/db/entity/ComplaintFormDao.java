package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPLAINT_FORM".
*/
public class ComplaintFormDao extends AbstractDao<ComplaintForm, Long> {

    public static final String TABLENAME = "COMPLAINT_FORM";

    /**
     * Properties of entity ComplaintForm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property Name = new Property(4, String.class, "name", false, "NAME");
        public final static Property TimeStamp = new Property(5, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property ComplainantFrom = new Property(7, String.class, "complainantFrom", false, "COMPLAINANT_FROM");
        public final static Property ComplainantFromId = new Property(8, String.class, "complainantFromId", false, "COMPLAINANT_FROM_ID");
        public final static Property ComplainantType = new Property(9, String.class, "complainantType", false, "COMPLAINANT_TYPE");
        public final static Property ComplainantTypeId = new Property(10, String.class, "complainantTypeId", false, "COMPLAINANT_TYPE_ID");
        public final static Property CarNo = new Property(11, String.class, "carNo", false, "CAR_NO");
        public final static Property BillNo = new Property(12, String.class, "billNo", false, "BILL_NO");
        public final static Property MobileNo = new Property(13, String.class, "mobileNo", false, "MOBILE_NO");
        public final static Property ComplaintDesc = new Property(14, String.class, "complaintDesc", false, "COMPLAINT_DESC");
        public final static Property Investigation = new Property(15, String.class, "investigation", false, "INVESTIGATION");
        public final static Property DoneAdvice = new Property(16, String.class, "doneAdvice", false, "DONE_ADVICE");
        public final static Property ComplainantSignature = new Property(17, String.class, "complainantSignature", false, "COMPLAINANT_SIGNATURE");
        public final static Property ReceiverSignature = new Property(18, String.class, "receiverSignature", false, "RECEIVER_SIGNATURE");
        public final static Property IsSubmit = new Property(19, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(20, boolean.class, "isComplete", false, "IS_COMPLETE");
    }


    public ComplaintFormDao(DaoConfig config) {
        super(config);
    }
    
    public ComplaintFormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPLAINT_FORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"NAME\" TEXT," + // 4: name
                "\"TIME_STAMP\" TEXT," + // 5: timeStamp
                "\"DATE\" TEXT," + // 6: date
                "\"COMPLAINANT_FROM\" TEXT," + // 7: complainantFrom
                "\"COMPLAINANT_FROM_ID\" TEXT," + // 8: complainantFromId
                "\"COMPLAINANT_TYPE\" TEXT," + // 9: complainantType
                "\"COMPLAINANT_TYPE_ID\" TEXT," + // 10: complainantTypeId
                "\"CAR_NO\" TEXT," + // 11: carNo
                "\"BILL_NO\" TEXT," + // 12: billNo
                "\"MOBILE_NO\" TEXT," + // 13: mobileNo
                "\"COMPLAINT_DESC\" TEXT," + // 14: complaintDesc
                "\"INVESTIGATION\" TEXT," + // 15: investigation
                "\"DONE_ADVICE\" TEXT," + // 16: doneAdvice
                "\"COMPLAINANT_SIGNATURE\" TEXT," + // 17: complainantSignature
                "\"RECEIVER_SIGNATURE\" TEXT," + // 18: receiverSignature
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 19: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 20: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPLAINT_FORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ComplaintForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(6, timeStamp);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
 
        String complainantFrom = entity.getComplainantFrom();
        if (complainantFrom != null) {
            stmt.bindString(8, complainantFrom);
        }
 
        String complainantFromId = entity.getComplainantFromId();
        if (complainantFromId != null) {
            stmt.bindString(9, complainantFromId);
        }
 
        String complainantType = entity.getComplainantType();
        if (complainantType != null) {
            stmt.bindString(10, complainantType);
        }
 
        String complainantTypeId = entity.getComplainantTypeId();
        if (complainantTypeId != null) {
            stmt.bindString(11, complainantTypeId);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(12, carNo);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(13, billNo);
        }
 
        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(14, mobileNo);
        }
 
        String complaintDesc = entity.getComplaintDesc();
        if (complaintDesc != null) {
            stmt.bindString(15, complaintDesc);
        }
 
        String investigation = entity.getInvestigation();
        if (investigation != null) {
            stmt.bindString(16, investigation);
        }
 
        String doneAdvice = entity.getDoneAdvice();
        if (doneAdvice != null) {
            stmt.bindString(17, doneAdvice);
        }
 
        String complainantSignature = entity.getComplainantSignature();
        if (complainantSignature != null) {
            stmt.bindString(18, complainantSignature);
        }
 
        String receiverSignature = entity.getReceiverSignature();
        if (receiverSignature != null) {
            stmt.bindString(19, receiverSignature);
        }
        stmt.bindLong(20, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(21, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ComplaintForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(5, name);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(6, timeStamp);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
 
        String complainantFrom = entity.getComplainantFrom();
        if (complainantFrom != null) {
            stmt.bindString(8, complainantFrom);
        }
 
        String complainantFromId = entity.getComplainantFromId();
        if (complainantFromId != null) {
            stmt.bindString(9, complainantFromId);
        }
 
        String complainantType = entity.getComplainantType();
        if (complainantType != null) {
            stmt.bindString(10, complainantType);
        }
 
        String complainantTypeId = entity.getComplainantTypeId();
        if (complainantTypeId != null) {
            stmt.bindString(11, complainantTypeId);
        }
 
        String carNo = entity.getCarNo();
        if (carNo != null) {
            stmt.bindString(12, carNo);
        }
 
        String billNo = entity.getBillNo();
        if (billNo != null) {
            stmt.bindString(13, billNo);
        }
 
        String mobileNo = entity.getMobileNo();
        if (mobileNo != null) {
            stmt.bindString(14, mobileNo);
        }
 
        String complaintDesc = entity.getComplaintDesc();
        if (complaintDesc != null) {
            stmt.bindString(15, complaintDesc);
        }
 
        String investigation = entity.getInvestigation();
        if (investigation != null) {
            stmt.bindString(16, investigation);
        }
 
        String doneAdvice = entity.getDoneAdvice();
        if (doneAdvice != null) {
            stmt.bindString(17, doneAdvice);
        }
 
        String complainantSignature = entity.getComplainantSignature();
        if (complainantSignature != null) {
            stmt.bindString(18, complainantSignature);
        }
 
        String receiverSignature = entity.getReceiverSignature();
        if (receiverSignature != null) {
            stmt.bindString(19, receiverSignature);
        }
        stmt.bindLong(20, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(21, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ComplaintForm readEntity(Cursor cursor, int offset) {
        ComplaintForm entity = new ComplaintForm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // timeStamp
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // complainantFrom
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // complainantFromId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // complainantType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // complainantTypeId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // carNo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // billNo
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // mobileNo
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // complaintDesc
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // investigation
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // doneAdvice
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // complainantSignature
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // receiverSignature
            cursor.getShort(offset + 19) != 0, // isSubmit
            cursor.getShort(offset + 20) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ComplaintForm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTimeStamp(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setComplainantFrom(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setComplainantFromId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setComplainantType(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setComplainantTypeId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCarNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBillNo(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setMobileNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setComplaintDesc(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setInvestigation(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setDoneAdvice(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setComplainantSignature(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setReceiverSignature(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setIsSubmit(cursor.getShort(offset + 19) != 0);
        entity.setIsComplete(cursor.getShort(offset + 20) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ComplaintForm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ComplaintForm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ComplaintForm entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
