package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kunbo.xiwei.db.entity.MonitorOndutyRecorde.CarInOutConverent;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONITOR_ONDUTY_RECORDE".
*/
public class MonitorOndutyRecordeDao extends AbstractDao<MonitorOndutyRecorde, Long> {

    public static final String TABLENAME = "MONITOR_ONDUTY_RECORDE";

    /**
     * Properties of entity MonitorOndutyRecorde.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property TimeStamp = new Property(4, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property MonitorName = new Property(5, String.class, "monitorName", false, "MONITOR_NAME");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property Weekday = new Property(7, String.class, "weekday", false, "WEEKDAY");
        public final static Property Team = new Property(8, String.class, "team", false, "TEAM");
        public final static Property TeamId = new Property(9, String.class, "teamId", false, "TEAM_ID");
        public final static Property TeamClass = new Property(10, String.class, "teamClass", false, "TEAM_CLASS");
        public final static Property OutPeople = new Property(11, String.class, "outPeople", false, "OUT_PEOPLE");
        public final static Property OutPeopleId = new Property(12, String.class, "outPeopleId", false, "OUT_PEOPLE_ID");
        public final static Property Weather = new Property(13, String.class, "weather", false, "WEATHER");
        public final static Property TotalFee = new Property(14, String.class, "totalFee", false, "TOTAL_FEE");
        public final static Property BackCardNum = new Property(15, String.class, "backCardNum", false, "BACK_CARD_NUM");
        public final static Property OutCardNum = new Property(16, String.class, "outCardNum", false, "OUT_CARD_NUM");
        public final static Property CarInList = new Property(17, String.class, "carInList", false, "CAR_IN_LIST");
        public final static Property CarOutList = new Property(18, String.class, "carOutList", false, "CAR_OUT_LIST");
        public final static Property BeforeOnduty = new Property(19, String.class, "beforeOnduty", false, "BEFORE_ONDUTY");
        public final static Property DuringOnduty = new Property(20, String.class, "duringOnduty", false, "DURING_ONDUTY");
        public final static Property AfterOnduty = new Property(21, String.class, "afterOnduty", false, "AFTER_ONDUTY");
        public final static Property OndutyRemark = new Property(22, String.class, "ondutyRemark", false, "ONDUTY_REMARK");
        public final static Property ReceivePeople = new Property(23, String.class, "receivePeople", false, "RECEIVE_PEOPLE");
        public final static Property ReceivePeopleId = new Property(24, String.class, "receivePeopleId", false, "RECEIVE_PEOPLE_ID");
        public final static Property MoneyExchange = new Property(25, String.class, "moneyExchange", false, "MONEY_EXCHANGE");
        public final static Property GoodsExchange = new Property(26, String.class, "goodsExchange", false, "GOODS_EXCHANGE");
        public final static Property MachineRun = new Property(27, String.class, "machineRun", false, "MACHINE_RUN");
        public final static Property InOutDirty = new Property(28, String.class, "inOutDirty", false, "IN_OUT_DIRTY");
        public final static Property ServiceGoods = new Property(29, String.class, "serviceGoods", false, "SERVICE_GOODS");
        public final static Property ElseExchange = new Property(30, String.class, "elseExchange", false, "ELSE_EXCHANGE");
        public final static Property ReceiveRemark = new Property(31, String.class, "receiveRemark", false, "RECEIVE_REMARK");
        public final static Property OndutyAgentName = new Property(32, String.class, "OndutyAgentName", false, "ONDUTY_AGENT_NAME");
        public final static Property OndutyAgentId = new Property(33, String.class, "ondutyAgentId", false, "ONDUTY_AGENT_ID");
        public final static Property StandardOn = new Property(34, String.class, "standardOn", false, "STANDARD_ON");
        public final static Property StandardExchange = new Property(35, String.class, "standardExchange", false, "STANDARD_EXCHANGE");
        public final static Property WorkRecord = new Property(36, String.class, "workRecord", false, "WORK_RECORD");
        public final static Property NumSame = new Property(37, String.class, "numSame", false, "NUM_SAME");
        public final static Property InAndOutDirty = new Property(38, String.class, "inAndOutDirty", false, "IN_AND_OUT_DIRTY");
        public final static Property CheckRemark = new Property(39, String.class, "checkRemark", false, "CHECK_REMARK");
        public final static Property ExchangeSignature = new Property(40, String.class, "exchangeSignature", false, "EXCHANGE_SIGNATURE");
        public final static Property RecieveSignature = new Property(41, String.class, "recieveSignature", false, "RECIEVE_SIGNATURE");
        public final static Property OndutySignature = new Property(42, String.class, "ondutySignature", false, "ONDUTY_SIGNATURE");
        public final static Property IsSubmit = new Property(43, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(44, boolean.class, "isComplete", false, "IS_COMPLETE");
    }

    private final CarInOutConverent carInListConverter = new CarInOutConverent();
    private final CarInOutConverent carOutListConverter = new CarInOutConverent();

    public MonitorOndutyRecordeDao(DaoConfig config) {
        super(config);
    }
    
    public MonitorOndutyRecordeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONITOR_ONDUTY_RECORDE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"TIME_STAMP\" TEXT," + // 4: timeStamp
                "\"MONITOR_NAME\" TEXT," + // 5: monitorName
                "\"DATE\" TEXT," + // 6: date
                "\"WEEKDAY\" TEXT," + // 7: weekday
                "\"TEAM\" TEXT," + // 8: team
                "\"TEAM_ID\" TEXT," + // 9: teamId
                "\"TEAM_CLASS\" TEXT," + // 10: teamClass
                "\"OUT_PEOPLE\" TEXT," + // 11: outPeople
                "\"OUT_PEOPLE_ID\" TEXT," + // 12: outPeopleId
                "\"WEATHER\" TEXT," + // 13: weather
                "\"TOTAL_FEE\" TEXT," + // 14: totalFee
                "\"BACK_CARD_NUM\" TEXT," + // 15: backCardNum
                "\"OUT_CARD_NUM\" TEXT," + // 16: outCardNum
                "\"CAR_IN_LIST\" TEXT," + // 17: carInList
                "\"CAR_OUT_LIST\" TEXT," + // 18: carOutList
                "\"BEFORE_ONDUTY\" TEXT," + // 19: beforeOnduty
                "\"DURING_ONDUTY\" TEXT," + // 20: duringOnduty
                "\"AFTER_ONDUTY\" TEXT," + // 21: afterOnduty
                "\"ONDUTY_REMARK\" TEXT," + // 22: ondutyRemark
                "\"RECEIVE_PEOPLE\" TEXT," + // 23: receivePeople
                "\"RECEIVE_PEOPLE_ID\" TEXT," + // 24: receivePeopleId
                "\"MONEY_EXCHANGE\" TEXT," + // 25: moneyExchange
                "\"GOODS_EXCHANGE\" TEXT," + // 26: goodsExchange
                "\"MACHINE_RUN\" TEXT," + // 27: machineRun
                "\"IN_OUT_DIRTY\" TEXT," + // 28: inOutDirty
                "\"SERVICE_GOODS\" TEXT," + // 29: serviceGoods
                "\"ELSE_EXCHANGE\" TEXT," + // 30: elseExchange
                "\"RECEIVE_REMARK\" TEXT," + // 31: receiveRemark
                "\"ONDUTY_AGENT_NAME\" TEXT," + // 32: OndutyAgentName
                "\"ONDUTY_AGENT_ID\" TEXT," + // 33: ondutyAgentId
                "\"STANDARD_ON\" TEXT," + // 34: standardOn
                "\"STANDARD_EXCHANGE\" TEXT," + // 35: standardExchange
                "\"WORK_RECORD\" TEXT," + // 36: workRecord
                "\"NUM_SAME\" TEXT," + // 37: numSame
                "\"IN_AND_OUT_DIRTY\" TEXT," + // 38: inAndOutDirty
                "\"CHECK_REMARK\" TEXT," + // 39: checkRemark
                "\"EXCHANGE_SIGNATURE\" TEXT," + // 40: exchangeSignature
                "\"RECIEVE_SIGNATURE\" TEXT," + // 41: recieveSignature
                "\"ONDUTY_SIGNATURE\" TEXT," + // 42: ondutySignature
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 43: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 44: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONITOR_ONDUTY_RECORDE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MonitorOndutyRecorde entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String monitorName = entity.getMonitorName();
        if (monitorName != null) {
            stmt.bindString(6, monitorName);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(8, weekday);
        }
 
        String team = entity.getTeam();
        if (team != null) {
            stmt.bindString(9, team);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(10, teamId);
        }
 
        String teamClass = entity.getTeamClass();
        if (teamClass != null) {
            stmt.bindString(11, teamClass);
        }
 
        String outPeople = entity.getOutPeople();
        if (outPeople != null) {
            stmt.bindString(12, outPeople);
        }
 
        String outPeopleId = entity.getOutPeopleId();
        if (outPeopleId != null) {
            stmt.bindString(13, outPeopleId);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(14, weather);
        }
 
        String totalFee = entity.getTotalFee();
        if (totalFee != null) {
            stmt.bindString(15, totalFee);
        }
 
        String backCardNum = entity.getBackCardNum();
        if (backCardNum != null) {
            stmt.bindString(16, backCardNum);
        }
 
        String outCardNum = entity.getOutCardNum();
        if (outCardNum != null) {
            stmt.bindString(17, outCardNum);
        }
 
        List carInList = entity.getCarInList();
        if (carInList != null) {
            stmt.bindString(18, carInListConverter.convertToDatabaseValue(carInList));
        }
 
        List carOutList = entity.getCarOutList();
        if (carOutList != null) {
            stmt.bindString(19, carOutListConverter.convertToDatabaseValue(carOutList));
        }
 
        String beforeOnduty = entity.getBeforeOnduty();
        if (beforeOnduty != null) {
            stmt.bindString(20, beforeOnduty);
        }
 
        String duringOnduty = entity.getDuringOnduty();
        if (duringOnduty != null) {
            stmt.bindString(21, duringOnduty);
        }
 
        String afterOnduty = entity.getAfterOnduty();
        if (afterOnduty != null) {
            stmt.bindString(22, afterOnduty);
        }
 
        String ondutyRemark = entity.getOndutyRemark();
        if (ondutyRemark != null) {
            stmt.bindString(23, ondutyRemark);
        }
 
        String receivePeople = entity.getReceivePeople();
        if (receivePeople != null) {
            stmt.bindString(24, receivePeople);
        }
 
        String receivePeopleId = entity.getReceivePeopleId();
        if (receivePeopleId != null) {
            stmt.bindString(25, receivePeopleId);
        }
 
        String moneyExchange = entity.getMoneyExchange();
        if (moneyExchange != null) {
            stmt.bindString(26, moneyExchange);
        }
 
        String goodsExchange = entity.getGoodsExchange();
        if (goodsExchange != null) {
            stmt.bindString(27, goodsExchange);
        }
 
        String machineRun = entity.getMachineRun();
        if (machineRun != null) {
            stmt.bindString(28, machineRun);
        }
 
        String inOutDirty = entity.getInOutDirty();
        if (inOutDirty != null) {
            stmt.bindString(29, inOutDirty);
        }
 
        String serviceGoods = entity.getServiceGoods();
        if (serviceGoods != null) {
            stmt.bindString(30, serviceGoods);
        }
 
        String elseExchange = entity.getElseExchange();
        if (elseExchange != null) {
            stmt.bindString(31, elseExchange);
        }
 
        String receiveRemark = entity.getReceiveRemark();
        if (receiveRemark != null) {
            stmt.bindString(32, receiveRemark);
        }
 
        String OndutyAgentName = entity.getOndutyAgentName();
        if (OndutyAgentName != null) {
            stmt.bindString(33, OndutyAgentName);
        }
 
        String ondutyAgentId = entity.getOndutyAgentId();
        if (ondutyAgentId != null) {
            stmt.bindString(34, ondutyAgentId);
        }
 
        String standardOn = entity.getStandardOn();
        if (standardOn != null) {
            stmt.bindString(35, standardOn);
        }
 
        String standardExchange = entity.getStandardExchange();
        if (standardExchange != null) {
            stmt.bindString(36, standardExchange);
        }
 
        String workRecord = entity.getWorkRecord();
        if (workRecord != null) {
            stmt.bindString(37, workRecord);
        }
 
        String numSame = entity.getNumSame();
        if (numSame != null) {
            stmt.bindString(38, numSame);
        }
 
        String inAndOutDirty = entity.getInAndOutDirty();
        if (inAndOutDirty != null) {
            stmt.bindString(39, inAndOutDirty);
        }
 
        String checkRemark = entity.getCheckRemark();
        if (checkRemark != null) {
            stmt.bindString(40, checkRemark);
        }
 
        String exchangeSignature = entity.getExchangeSignature();
        if (exchangeSignature != null) {
            stmt.bindString(41, exchangeSignature);
        }
 
        String recieveSignature = entity.getRecieveSignature();
        if (recieveSignature != null) {
            stmt.bindString(42, recieveSignature);
        }
 
        String ondutySignature = entity.getOndutySignature();
        if (ondutySignature != null) {
            stmt.bindString(43, ondutySignature);
        }
        stmt.bindLong(44, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(45, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MonitorOndutyRecorde entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String monitorName = entity.getMonitorName();
        if (monitorName != null) {
            stmt.bindString(6, monitorName);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(7, date);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(8, weekday);
        }
 
        String team = entity.getTeam();
        if (team != null) {
            stmt.bindString(9, team);
        }
 
        String teamId = entity.getTeamId();
        if (teamId != null) {
            stmt.bindString(10, teamId);
        }
 
        String teamClass = entity.getTeamClass();
        if (teamClass != null) {
            stmt.bindString(11, teamClass);
        }
 
        String outPeople = entity.getOutPeople();
        if (outPeople != null) {
            stmt.bindString(12, outPeople);
        }
 
        String outPeopleId = entity.getOutPeopleId();
        if (outPeopleId != null) {
            stmt.bindString(13, outPeopleId);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(14, weather);
        }
 
        String totalFee = entity.getTotalFee();
        if (totalFee != null) {
            stmt.bindString(15, totalFee);
        }
 
        String backCardNum = entity.getBackCardNum();
        if (backCardNum != null) {
            stmt.bindString(16, backCardNum);
        }
 
        String outCardNum = entity.getOutCardNum();
        if (outCardNum != null) {
            stmt.bindString(17, outCardNum);
        }
 
        List carInList = entity.getCarInList();
        if (carInList != null) {
            stmt.bindString(18, carInListConverter.convertToDatabaseValue(carInList));
        }
 
        List carOutList = entity.getCarOutList();
        if (carOutList != null) {
            stmt.bindString(19, carOutListConverter.convertToDatabaseValue(carOutList));
        }
 
        String beforeOnduty = entity.getBeforeOnduty();
        if (beforeOnduty != null) {
            stmt.bindString(20, beforeOnduty);
        }
 
        String duringOnduty = entity.getDuringOnduty();
        if (duringOnduty != null) {
            stmt.bindString(21, duringOnduty);
        }
 
        String afterOnduty = entity.getAfterOnduty();
        if (afterOnduty != null) {
            stmt.bindString(22, afterOnduty);
        }
 
        String ondutyRemark = entity.getOndutyRemark();
        if (ondutyRemark != null) {
            stmt.bindString(23, ondutyRemark);
        }
 
        String receivePeople = entity.getReceivePeople();
        if (receivePeople != null) {
            stmt.bindString(24, receivePeople);
        }
 
        String receivePeopleId = entity.getReceivePeopleId();
        if (receivePeopleId != null) {
            stmt.bindString(25, receivePeopleId);
        }
 
        String moneyExchange = entity.getMoneyExchange();
        if (moneyExchange != null) {
            stmt.bindString(26, moneyExchange);
        }
 
        String goodsExchange = entity.getGoodsExchange();
        if (goodsExchange != null) {
            stmt.bindString(27, goodsExchange);
        }
 
        String machineRun = entity.getMachineRun();
        if (machineRun != null) {
            stmt.bindString(28, machineRun);
        }
 
        String inOutDirty = entity.getInOutDirty();
        if (inOutDirty != null) {
            stmt.bindString(29, inOutDirty);
        }
 
        String serviceGoods = entity.getServiceGoods();
        if (serviceGoods != null) {
            stmt.bindString(30, serviceGoods);
        }
 
        String elseExchange = entity.getElseExchange();
        if (elseExchange != null) {
            stmt.bindString(31, elseExchange);
        }
 
        String receiveRemark = entity.getReceiveRemark();
        if (receiveRemark != null) {
            stmt.bindString(32, receiveRemark);
        }
 
        String OndutyAgentName = entity.getOndutyAgentName();
        if (OndutyAgentName != null) {
            stmt.bindString(33, OndutyAgentName);
        }
 
        String ondutyAgentId = entity.getOndutyAgentId();
        if (ondutyAgentId != null) {
            stmt.bindString(34, ondutyAgentId);
        }
 
        String standardOn = entity.getStandardOn();
        if (standardOn != null) {
            stmt.bindString(35, standardOn);
        }
 
        String standardExchange = entity.getStandardExchange();
        if (standardExchange != null) {
            stmt.bindString(36, standardExchange);
        }
 
        String workRecord = entity.getWorkRecord();
        if (workRecord != null) {
            stmt.bindString(37, workRecord);
        }
 
        String numSame = entity.getNumSame();
        if (numSame != null) {
            stmt.bindString(38, numSame);
        }
 
        String inAndOutDirty = entity.getInAndOutDirty();
        if (inAndOutDirty != null) {
            stmt.bindString(39, inAndOutDirty);
        }
 
        String checkRemark = entity.getCheckRemark();
        if (checkRemark != null) {
            stmt.bindString(40, checkRemark);
        }
 
        String exchangeSignature = entity.getExchangeSignature();
        if (exchangeSignature != null) {
            stmt.bindString(41, exchangeSignature);
        }
 
        String recieveSignature = entity.getRecieveSignature();
        if (recieveSignature != null) {
            stmt.bindString(42, recieveSignature);
        }
 
        String ondutySignature = entity.getOndutySignature();
        if (ondutySignature != null) {
            stmt.bindString(43, ondutySignature);
        }
        stmt.bindLong(44, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(45, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MonitorOndutyRecorde readEntity(Cursor cursor, int offset) {
        MonitorOndutyRecorde entity = new MonitorOndutyRecorde( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // monitorName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // weekday
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // team
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // teamId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // teamClass
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // outPeople
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // outPeopleId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // weather
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // totalFee
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // backCardNum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // outCardNum
            cursor.isNull(offset + 17) ? null : carInListConverter.convertToEntityProperty(cursor.getString(offset + 17)), // carInList
            cursor.isNull(offset + 18) ? null : carOutListConverter.convertToEntityProperty(cursor.getString(offset + 18)), // carOutList
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // beforeOnduty
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // duringOnduty
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // afterOnduty
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // ondutyRemark
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // receivePeople
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // receivePeopleId
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // moneyExchange
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // goodsExchange
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // machineRun
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // inOutDirty
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // serviceGoods
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // elseExchange
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // receiveRemark
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // OndutyAgentName
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // ondutyAgentId
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // standardOn
            cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35), // standardExchange
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // workRecord
            cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37), // numSame
            cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38), // inAndOutDirty
            cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39), // checkRemark
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // exchangeSignature
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // recieveSignature
            cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42), // ondutySignature
            cursor.getShort(offset + 43) != 0, // isSubmit
            cursor.getShort(offset + 44) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MonitorOndutyRecorde entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMonitorName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setWeekday(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTeam(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTeamId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTeamClass(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOutPeople(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOutPeopleId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setWeather(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTotalFee(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setBackCardNum(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setOutCardNum(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setCarInList(cursor.isNull(offset + 17) ? null : carInListConverter.convertToEntityProperty(cursor.getString(offset + 17)));
        entity.setCarOutList(cursor.isNull(offset + 18) ? null : carOutListConverter.convertToEntityProperty(cursor.getString(offset + 18)));
        entity.setBeforeOnduty(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDuringOnduty(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setAfterOnduty(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setOndutyRemark(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReceivePeople(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setReceivePeopleId(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setMoneyExchange(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setGoodsExchange(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setMachineRun(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setInOutDirty(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setServiceGoods(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setElseExchange(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setReceiveRemark(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setOndutyAgentName(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setOndutyAgentId(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setStandardOn(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setStandardExchange(cursor.isNull(offset + 35) ? null : cursor.getString(offset + 35));
        entity.setWorkRecord(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setNumSame(cursor.isNull(offset + 37) ? null : cursor.getString(offset + 37));
        entity.setInAndOutDirty(cursor.isNull(offset + 38) ? null : cursor.getString(offset + 38));
        entity.setCheckRemark(cursor.isNull(offset + 39) ? null : cursor.getString(offset + 39));
        entity.setExchangeSignature(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setRecieveSignature(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setOndutySignature(cursor.isNull(offset + 42) ? null : cursor.getString(offset + 42));
        entity.setIsSubmit(cursor.getShort(offset + 43) != 0);
        entity.setIsComplete(cursor.getShort(offset + 44) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MonitorOndutyRecorde entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MonitorOndutyRecorde entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MonitorOndutyRecorde entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
