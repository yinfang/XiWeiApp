package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "INSPECTION_FORM".
*/
public class InspectionFormDao extends AbstractDao<InspectionForm, Long> {

    public static final String TABLENAME = "INSPECTION_FORM";

    /**
     * Properties of entity InspectionForm.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property Inspection = new Property(4, String.class, "inspection", false, "INSPECTION");
        public final static Property InspectionId = new Property(5, String.class, "inspectionId", false, "INSPECTION_ID");
        public final static Property Inspected = new Property(6, String.class, "inspected", false, "INSPECTED");
        public final static Property InspectedId = new Property(7, String.class, "inspectedId", false, "INSPECTED_ID");
        public final static Property DateTime = new Property(8, String.class, "dateTime", false, "DATE_TIME");
        public final static Property Content = new Property(9, String.class, "content", false, "CONTENT");
        public final static Property MainQes = new Property(10, String.class, "mainQes", false, "MAIN_QES");
        public final static Property PartySignature = new Property(11, String.class, "partySignature", false, "PARTY_SIGNATURE");
        public final static Property Result = new Property(12, String.class, "result", false, "RESULT");
        public final static Property LeaderSignature = new Property(13, String.class, "leaderSignature", false, "LEADER_SIGNATURE");
        public final static Property InspectorSignature = new Property(14, String.class, "inspectorSignature", false, "INSPECTOR_SIGNATURE");
        public final static Property Remark = new Property(15, String.class, "remark", false, "REMARK");
        public final static Property IsSubmit = new Property(16, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(17, boolean.class, "isComplete", false, "IS_COMPLETE");
    }


    public InspectionFormDao(DaoConfig config) {
        super(config);
    }
    
    public InspectionFormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"INSPECTION_FORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"INSPECTION\" TEXT," + // 4: inspection
                "\"INSPECTION_ID\" TEXT," + // 5: inspectionId
                "\"INSPECTED\" TEXT," + // 6: inspected
                "\"INSPECTED_ID\" TEXT," + // 7: inspectedId
                "\"DATE_TIME\" TEXT," + // 8: dateTime
                "\"CONTENT\" TEXT," + // 9: content
                "\"MAIN_QES\" TEXT," + // 10: mainQes
                "\"PARTY_SIGNATURE\" TEXT," + // 11: partySignature
                "\"RESULT\" TEXT," + // 12: result
                "\"LEADER_SIGNATURE\" TEXT," + // 13: leaderSignature
                "\"INSPECTOR_SIGNATURE\" TEXT," + // 14: inspectorSignature
                "\"REMARK\" TEXT," + // 15: remark
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 16: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 17: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"INSPECTION_FORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, InspectionForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String inspection = entity.getInspection();
        if (inspection != null) {
            stmt.bindString(5, inspection);
        }
 
        String inspectionId = entity.getInspectionId();
        if (inspectionId != null) {
            stmt.bindString(6, inspectionId);
        }
 
        String inspected = entity.getInspected();
        if (inspected != null) {
            stmt.bindString(7, inspected);
        }
 
        String inspectedId = entity.getInspectedId();
        if (inspectedId != null) {
            stmt.bindString(8, inspectedId);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
 
        String mainQes = entity.getMainQes();
        if (mainQes != null) {
            stmt.bindString(11, mainQes);
        }
 
        String partySignature = entity.getPartySignature();
        if (partySignature != null) {
            stmt.bindString(12, partySignature);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(13, result);
        }
 
        String leaderSignature = entity.getLeaderSignature();
        if (leaderSignature != null) {
            stmt.bindString(14, leaderSignature);
        }
 
        String inspectorSignature = entity.getInspectorSignature();
        if (inspectorSignature != null) {
            stmt.bindString(15, inspectorSignature);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
        stmt.bindLong(17, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, InspectionForm entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String inspection = entity.getInspection();
        if (inspection != null) {
            stmt.bindString(5, inspection);
        }
 
        String inspectionId = entity.getInspectionId();
        if (inspectionId != null) {
            stmt.bindString(6, inspectionId);
        }
 
        String inspected = entity.getInspected();
        if (inspected != null) {
            stmt.bindString(7, inspected);
        }
 
        String inspectedId = entity.getInspectedId();
        if (inspectedId != null) {
            stmt.bindString(8, inspectedId);
        }
 
        String dateTime = entity.getDateTime();
        if (dateTime != null) {
            stmt.bindString(9, dateTime);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(10, content);
        }
 
        String mainQes = entity.getMainQes();
        if (mainQes != null) {
            stmt.bindString(11, mainQes);
        }
 
        String partySignature = entity.getPartySignature();
        if (partySignature != null) {
            stmt.bindString(12, partySignature);
        }
 
        String result = entity.getResult();
        if (result != null) {
            stmt.bindString(13, result);
        }
 
        String leaderSignature = entity.getLeaderSignature();
        if (leaderSignature != null) {
            stmt.bindString(14, leaderSignature);
        }
 
        String inspectorSignature = entity.getInspectorSignature();
        if (inspectorSignature != null) {
            stmt.bindString(15, inspectorSignature);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
        stmt.bindLong(17, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(18, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public InspectionForm readEntity(Cursor cursor, int offset) {
        InspectionForm entity = new InspectionForm( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // inspection
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // inspectionId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // inspected
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // inspectedId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dateTime
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // content
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // mainQes
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // partySignature
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // result
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // leaderSignature
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // inspectorSignature
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // remark
            cursor.getShort(offset + 16) != 0, // isSubmit
            cursor.getShort(offset + 17) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, InspectionForm entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInspection(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setInspectionId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setInspected(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setInspectedId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDateTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setContent(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setMainQes(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setPartySignature(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setResult(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setLeaderSignature(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setInspectorSignature(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsSubmit(cursor.getShort(offset + 16) != 0);
        entity.setIsComplete(cursor.getShort(offset + 17) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(InspectionForm entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(InspectionForm entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(InspectionForm entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
