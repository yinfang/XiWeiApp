package com.kunbo.xiwei.db.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.kunbo.xiwei.db.entity.StationOndutyRecorde.OndutyConvert;
import com.kunbo.xiwei.db.entity.StationOndutyRecorde.TeamConvert;
import com.zyf.model.MyData;
import java.util.List;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STATION_ONDUTY_RECORDE".
*/
public class StationOndutyRecordeDao extends AbstractDao<StationOndutyRecorde, Long> {

    public static final String TABLENAME = "STATION_ONDUTY_RECORDE";

    /**
     * Properties of entity StationOndutyRecorde.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, String.class, "userId", false, "USER_ID");
        public final static Property PersonId = new Property(2, String.class, "personId", false, "PERSON_ID");
        public final static Property StaionId = new Property(3, String.class, "staionId", false, "STAION_ID");
        public final static Property TimeStamp = new Property(4, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property StationName = new Property(5, String.class, "stationName", false, "STATION_NAME");
        public final static Property TicketName = new Property(6, String.class, "ticketName", false, "TICKET_NAME");
        public final static Property TicketId = new Property(7, String.class, "ticketId", false, "TICKET_ID");
        public final static Property Date = new Property(8, String.class, "date", false, "DATE");
        public final static Property Weekday = new Property(9, String.class, "weekday", false, "WEEKDAY");
        public final static Property Weather = new Property(10, String.class, "weather", false, "WEATHER");
        public final static Property RecordeNo = new Property(11, String.class, "recordeNo", false, "RECORDE_NO");
        public final static Property TeamList = new Property(12, String.class, "teamList", false, "TEAM_LIST");
        public final static Property TotalFee = new Property(13, String.class, "totalFee", false, "TOTAL_FEE");
        public final static Property CarNum = new Property(14, String.class, "carNum", false, "CAR_NUM");
        public final static Property CheckNum = new Property(15, String.class, "checkNum", false, "CHECK_NUM");
        public final static Property ReturnNum = new Property(16, String.class, "returnNum", false, "RETURN_NUM");
        public final static Property ExemptionAmount = new Property(17, String.class, "exemptionAmount", false, "EXEMPTION_AMOUNT");
        public final static Property InFlow = new Property(18, String.class, "inFlow", false, "IN_FLOW");
        public final static Property OutFlow = new Property(19, String.class, "outFlow", false, "OUT_FLOW");
        public final static Property NotifyCheck = new Property(20, String.class, "notifyCheck", false, "NOTIFY_CHECK");
        public final static Property ImplementState = new Property(21, String.class, "implementState", false, "IMPLEMENT_STATE");
        public final static Property BeforeOnduty = new Property(22, String.class, "beforeOnduty", false, "BEFORE_ONDUTY");
        public final static Property OndutyList = new Property(23, String.class, "ondutyList", false, "ONDUTY_LIST");
        public final static Property AfterOnduty = new Property(24, String.class, "afterOnduty", false, "AFTER_ONDUTY");
        public final static Property DuringOnduty = new Property(25, String.class, "duringOnduty", false, "DURING_ONDUTY");
        public final static Property Todo = new Property(26, String.class, "todo", false, "TODO");
        public final static Property Remark = new Property(27, String.class, "remark", false, "REMARK");
        public final static Property ExchangeSignature = new Property(28, String.class, "exchangeSignature", false, "EXCHANGE_SIGNATURE");
        public final static Property RecieveSignature = new Property(29, String.class, "recieveSignature", false, "RECIEVE_SIGNATURE");
        public final static Property IsSubmit = new Property(30, boolean.class, "isSubmit", false, "IS_SUBMIT");
        public final static Property IsComplete = new Property(31, boolean.class, "isComplete", false, "IS_COMPLETE");
    }

    private final TeamConvert teamListConverter = new TeamConvert();
    private final OndutyConvert ondutyListConverter = new OndutyConvert();

    public StationOndutyRecordeDao(DaoConfig config) {
        super(config);
    }
    
    public StationOndutyRecordeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STATION_ONDUTY_RECORDE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userId
                "\"PERSON_ID\" TEXT," + // 2: personId
                "\"STAION_ID\" TEXT," + // 3: staionId
                "\"TIME_STAMP\" TEXT," + // 4: timeStamp
                "\"STATION_NAME\" TEXT," + // 5: stationName
                "\"TICKET_NAME\" TEXT," + // 6: ticketName
                "\"TICKET_ID\" TEXT," + // 7: ticketId
                "\"DATE\" TEXT," + // 8: date
                "\"WEEKDAY\" TEXT," + // 9: weekday
                "\"WEATHER\" TEXT," + // 10: weather
                "\"RECORDE_NO\" TEXT," + // 11: recordeNo
                "\"TEAM_LIST\" TEXT," + // 12: teamList
                "\"TOTAL_FEE\" TEXT," + // 13: totalFee
                "\"CAR_NUM\" TEXT," + // 14: carNum
                "\"CHECK_NUM\" TEXT," + // 15: checkNum
                "\"RETURN_NUM\" TEXT," + // 16: returnNum
                "\"EXEMPTION_AMOUNT\" TEXT," + // 17: exemptionAmount
                "\"IN_FLOW\" TEXT," + // 18: inFlow
                "\"OUT_FLOW\" TEXT," + // 19: outFlow
                "\"NOTIFY_CHECK\" TEXT," + // 20: notifyCheck
                "\"IMPLEMENT_STATE\" TEXT," + // 21: implementState
                "\"BEFORE_ONDUTY\" TEXT," + // 22: beforeOnduty
                "\"ONDUTY_LIST\" TEXT," + // 23: ondutyList
                "\"AFTER_ONDUTY\" TEXT," + // 24: afterOnduty
                "\"DURING_ONDUTY\" TEXT," + // 25: duringOnduty
                "\"TODO\" TEXT," + // 26: todo
                "\"REMARK\" TEXT," + // 27: remark
                "\"EXCHANGE_SIGNATURE\" TEXT," + // 28: exchangeSignature
                "\"RECIEVE_SIGNATURE\" TEXT," + // 29: recieveSignature
                "\"IS_SUBMIT\" INTEGER NOT NULL ," + // 30: isSubmit
                "\"IS_COMPLETE\" INTEGER NOT NULL );"); // 31: isComplete
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STATION_ONDUTY_RECORDE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StationOndutyRecorde entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(6, stationName);
        }
 
        String ticketName = entity.getTicketName();
        if (ticketName != null) {
            stmt.bindString(7, ticketName);
        }
 
        String ticketId = entity.getTicketId();
        if (ticketId != null) {
            stmt.bindString(8, ticketId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(10, weekday);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(11, weather);
        }
 
        String recordeNo = entity.getRecordeNo();
        if (recordeNo != null) {
            stmt.bindString(12, recordeNo);
        }
 
        List teamList = entity.getTeamList();
        if (teamList != null) {
            stmt.bindString(13, teamListConverter.convertToDatabaseValue(teamList));
        }
 
        String totalFee = entity.getTotalFee();
        if (totalFee != null) {
            stmt.bindString(14, totalFee);
        }
 
        String carNum = entity.getCarNum();
        if (carNum != null) {
            stmt.bindString(15, carNum);
        }
 
        String checkNum = entity.getCheckNum();
        if (checkNum != null) {
            stmt.bindString(16, checkNum);
        }
 
        String returnNum = entity.getReturnNum();
        if (returnNum != null) {
            stmt.bindString(17, returnNum);
        }
 
        String exemptionAmount = entity.getExemptionAmount();
        if (exemptionAmount != null) {
            stmt.bindString(18, exemptionAmount);
        }
 
        String inFlow = entity.getInFlow();
        if (inFlow != null) {
            stmt.bindString(19, inFlow);
        }
 
        String outFlow = entity.getOutFlow();
        if (outFlow != null) {
            stmt.bindString(20, outFlow);
        }
 
        String notifyCheck = entity.getNotifyCheck();
        if (notifyCheck != null) {
            stmt.bindString(21, notifyCheck);
        }
 
        String implementState = entity.getImplementState();
        if (implementState != null) {
            stmt.bindString(22, implementState);
        }
 
        String beforeOnduty = entity.getBeforeOnduty();
        if (beforeOnduty != null) {
            stmt.bindString(23, beforeOnduty);
        }
 
        MyData ondutyList = entity.getOndutyList();
        if (ondutyList != null) {
            stmt.bindString(24, ondutyListConverter.convertToDatabaseValue(ondutyList));
        }
 
        String afterOnduty = entity.getAfterOnduty();
        if (afterOnduty != null) {
            stmt.bindString(25, afterOnduty);
        }
 
        String duringOnduty = entity.getDuringOnduty();
        if (duringOnduty != null) {
            stmt.bindString(26, duringOnduty);
        }
 
        String todo = entity.getTodo();
        if (todo != null) {
            stmt.bindString(27, todo);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(28, remark);
        }
 
        String exchangeSignature = entity.getExchangeSignature();
        if (exchangeSignature != null) {
            stmt.bindString(29, exchangeSignature);
        }
 
        String recieveSignature = entity.getRecieveSignature();
        if (recieveSignature != null) {
            stmt.bindString(30, recieveSignature);
        }
        stmt.bindLong(31, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(32, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StationOndutyRecorde entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(2, userId);
        }
 
        String personId = entity.getPersonId();
        if (personId != null) {
            stmt.bindString(3, personId);
        }
 
        String staionId = entity.getStaionId();
        if (staionId != null) {
            stmt.bindString(4, staionId);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(5, timeStamp);
        }
 
        String stationName = entity.getStationName();
        if (stationName != null) {
            stmt.bindString(6, stationName);
        }
 
        String ticketName = entity.getTicketName();
        if (ticketName != null) {
            stmt.bindString(7, ticketName);
        }
 
        String ticketId = entity.getTicketId();
        if (ticketId != null) {
            stmt.bindString(8, ticketId);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(9, date);
        }
 
        String weekday = entity.getWeekday();
        if (weekday != null) {
            stmt.bindString(10, weekday);
        }
 
        String weather = entity.getWeather();
        if (weather != null) {
            stmt.bindString(11, weather);
        }
 
        String recordeNo = entity.getRecordeNo();
        if (recordeNo != null) {
            stmt.bindString(12, recordeNo);
        }
 
        List teamList = entity.getTeamList();
        if (teamList != null) {
            stmt.bindString(13, teamListConverter.convertToDatabaseValue(teamList));
        }
 
        String totalFee = entity.getTotalFee();
        if (totalFee != null) {
            stmt.bindString(14, totalFee);
        }
 
        String carNum = entity.getCarNum();
        if (carNum != null) {
            stmt.bindString(15, carNum);
        }
 
        String checkNum = entity.getCheckNum();
        if (checkNum != null) {
            stmt.bindString(16, checkNum);
        }
 
        String returnNum = entity.getReturnNum();
        if (returnNum != null) {
            stmt.bindString(17, returnNum);
        }
 
        String exemptionAmount = entity.getExemptionAmount();
        if (exemptionAmount != null) {
            stmt.bindString(18, exemptionAmount);
        }
 
        String inFlow = entity.getInFlow();
        if (inFlow != null) {
            stmt.bindString(19, inFlow);
        }
 
        String outFlow = entity.getOutFlow();
        if (outFlow != null) {
            stmt.bindString(20, outFlow);
        }
 
        String notifyCheck = entity.getNotifyCheck();
        if (notifyCheck != null) {
            stmt.bindString(21, notifyCheck);
        }
 
        String implementState = entity.getImplementState();
        if (implementState != null) {
            stmt.bindString(22, implementState);
        }
 
        String beforeOnduty = entity.getBeforeOnduty();
        if (beforeOnduty != null) {
            stmt.bindString(23, beforeOnduty);
        }
 
        MyData ondutyList = entity.getOndutyList();
        if (ondutyList != null) {
            stmt.bindString(24, ondutyListConverter.convertToDatabaseValue(ondutyList));
        }
 
        String afterOnduty = entity.getAfterOnduty();
        if (afterOnduty != null) {
            stmt.bindString(25, afterOnduty);
        }
 
        String duringOnduty = entity.getDuringOnduty();
        if (duringOnduty != null) {
            stmt.bindString(26, duringOnduty);
        }
 
        String todo = entity.getTodo();
        if (todo != null) {
            stmt.bindString(27, todo);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(28, remark);
        }
 
        String exchangeSignature = entity.getExchangeSignature();
        if (exchangeSignature != null) {
            stmt.bindString(29, exchangeSignature);
        }
 
        String recieveSignature = entity.getRecieveSignature();
        if (recieveSignature != null) {
            stmt.bindString(30, recieveSignature);
        }
        stmt.bindLong(31, entity.getIsSubmit() ? 1L: 0L);
        stmt.bindLong(32, entity.getIsComplete() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public StationOndutyRecorde readEntity(Cursor cursor, int offset) {
        StationOndutyRecorde entity = new StationOndutyRecorde( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // personId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // staionId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // timeStamp
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // stationName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ticketName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ticketId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // weekday
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // weather
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // recordeNo
            cursor.isNull(offset + 12) ? null : teamListConverter.convertToEntityProperty(cursor.getString(offset + 12)), // teamList
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // totalFee
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // carNum
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // checkNum
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // returnNum
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // exemptionAmount
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // inFlow
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // outFlow
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // notifyCheck
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // implementState
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // beforeOnduty
            cursor.isNull(offset + 23) ? null : ondutyListConverter.convertToEntityProperty(cursor.getString(offset + 23)), // ondutyList
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // afterOnduty
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // duringOnduty
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // todo
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // remark
            cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28), // exchangeSignature
            cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29), // recieveSignature
            cursor.getShort(offset + 30) != 0, // isSubmit
            cursor.getShort(offset + 31) != 0 // isComplete
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StationOndutyRecorde entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersonId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStaionId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTimeStamp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStationName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTicketName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTicketId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWeekday(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWeather(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRecordeNo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTeamList(cursor.isNull(offset + 12) ? null : teamListConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setTotalFee(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setCarNum(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCheckNum(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setReturnNum(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setExemptionAmount(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setInFlow(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setOutFlow(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setNotifyCheck(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setImplementState(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setBeforeOnduty(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setOndutyList(cursor.isNull(offset + 23) ? null : ondutyListConverter.convertToEntityProperty(cursor.getString(offset + 23)));
        entity.setAfterOnduty(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setDuringOnduty(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setTodo(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setRemark(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setExchangeSignature(cursor.isNull(offset + 28) ? null : cursor.getString(offset + 28));
        entity.setRecieveSignature(cursor.isNull(offset + 29) ? null : cursor.getString(offset + 29));
        entity.setIsSubmit(cursor.getShort(offset + 30) != 0);
        entity.setIsComplete(cursor.getShort(offset + 31) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(StationOndutyRecorde entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(StationOndutyRecorde entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StationOndutyRecorde entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
